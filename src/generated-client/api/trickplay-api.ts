/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 *
 * Jellyfin API
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProblemDetails } from '../models';
/**
 * TrickplayApi - axios parameter creator
 * @export
 */
export const TrickplayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets an image tiles playlist for trickplay.
         * @param {string} itemId The item id.
         * @param {number} width The width of a single tile.
         * @param {string} [mediaSourceId] The media version id, if using an alternate version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrickplayHlsPlaylist: async (itemId: string, width: number, mediaSourceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getTrickplayHlsPlaylist', 'itemId', itemId)
            // verify required parameter 'width' is not null or undefined
            assertParamExists('getTrickplayHlsPlaylist', 'width', width)
            const localVarPath = `/Videos/{itemId}/Trickplay/{width}/tiles.m3u8`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"width"}}`, encodeURIComponent(String(width)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (mediaSourceId !== undefined) {
                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a trickplay tile image.
         * @param {string} itemId The item id.
         * @param {number} width The width of a single tile.
         * @param {number} index The index of the desired tile.
         * @param {string} [mediaSourceId] The media version id, if using an alternate version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrickplayTileImage: async (itemId: string, width: number, index: number, mediaSourceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getTrickplayTileImage', 'itemId', itemId)
            // verify required parameter 'width' is not null or undefined
            assertParamExists('getTrickplayTileImage', 'width', width)
            // verify required parameter 'index' is not null or undefined
            assertParamExists('getTrickplayTileImage', 'index', index)
            const localVarPath = `/Videos/{itemId}/Trickplay/{width}/{index}.jpg`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"width"}}`, encodeURIComponent(String(width)))
                .replace(`{${"index"}}`, encodeURIComponent(String(index)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (mediaSourceId !== undefined) {
                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrickplayApi - functional programming interface
 * @export
 */
export const TrickplayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrickplayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets an image tiles playlist for trickplay.
         * @param {string} itemId The item id.
         * @param {number} width The width of a single tile.
         * @param {string} [mediaSourceId] The media version id, if using an alternate version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrickplayHlsPlaylist(itemId: string, width: number, mediaSourceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrickplayHlsPlaylist(itemId, width, mediaSourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a trickplay tile image.
         * @param {string} itemId The item id.
         * @param {number} width The width of a single tile.
         * @param {number} index The index of the desired tile.
         * @param {string} [mediaSourceId] The media version id, if using an alternate version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrickplayTileImage(itemId: string, width: number, index: number, mediaSourceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrickplayTileImage(itemId, width, index, mediaSourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrickplayApi - factory interface
 * @export
 */
export const TrickplayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrickplayApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets an image tiles playlist for trickplay.
         * @param {string} itemId The item id.
         * @param {number} width The width of a single tile.
         * @param {string} [mediaSourceId] The media version id, if using an alternate version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrickplayHlsPlaylist(itemId: string, width: number, mediaSourceId?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getTrickplayHlsPlaylist(itemId, width, mediaSourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a trickplay tile image.
         * @param {string} itemId The item id.
         * @param {number} width The width of a single tile.
         * @param {number} index The index of the desired tile.
         * @param {string} [mediaSourceId] The media version id, if using an alternate version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrickplayTileImage(itemId: string, width: number, index: number, mediaSourceId?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getTrickplayTileImage(itemId, width, index, mediaSourceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTrickplayHlsPlaylist operation in TrickplayApi.
 * @export
 * @interface TrickplayApiGetTrickplayHlsPlaylistRequest
 */
export interface TrickplayApiGetTrickplayHlsPlaylistRequest {
    /**
     * The item id.
     * @type {string}
     * @memberof TrickplayApiGetTrickplayHlsPlaylist
     */
    readonly itemId: string

    /**
     * The width of a single tile.
     * @type {number}
     * @memberof TrickplayApiGetTrickplayHlsPlaylist
     */
    readonly width: number

    /**
     * The media version id, if using an alternate version.
     * @type {string}
     * @memberof TrickplayApiGetTrickplayHlsPlaylist
     */
    readonly mediaSourceId?: string
}

/**
 * Request parameters for getTrickplayTileImage operation in TrickplayApi.
 * @export
 * @interface TrickplayApiGetTrickplayTileImageRequest
 */
export interface TrickplayApiGetTrickplayTileImageRequest {
    /**
     * The item id.
     * @type {string}
     * @memberof TrickplayApiGetTrickplayTileImage
     */
    readonly itemId: string

    /**
     * The width of a single tile.
     * @type {number}
     * @memberof TrickplayApiGetTrickplayTileImage
     */
    readonly width: number

    /**
     * The index of the desired tile.
     * @type {number}
     * @memberof TrickplayApiGetTrickplayTileImage
     */
    readonly index: number

    /**
     * The media version id, if using an alternate version.
     * @type {string}
     * @memberof TrickplayApiGetTrickplayTileImage
     */
    readonly mediaSourceId?: string
}

/**
 * TrickplayApi - object-oriented interface
 * @export
 * @class TrickplayApi
 * @extends {BaseAPI}
 */
export class TrickplayApi extends BaseAPI {
    /**
     * 
     * @summary Gets an image tiles playlist for trickplay.
     * @param {TrickplayApiGetTrickplayHlsPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrickplayApi
     */
    public getTrickplayHlsPlaylist(requestParameters: TrickplayApiGetTrickplayHlsPlaylistRequest, options?: AxiosRequestConfig) {
        return TrickplayApiFp(this.configuration).getTrickplayHlsPlaylist(requestParameters.itemId, requestParameters.width, requestParameters.mediaSourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a trickplay tile image.
     * @param {TrickplayApiGetTrickplayTileImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrickplayApi
     */
    public getTrickplayTileImage(requestParameters: TrickplayApiGetTrickplayTileImageRequest, options?: AxiosRequestConfig) {
        return TrickplayApiFp(this.configuration).getTrickplayTileImage(requestParameters.itemId, requestParameters.width, requestParameters.index, requestParameters.mediaSourceId, options).then((request) => request(this.axios, this.basePath));
    }
}
